
name: Autorelease

on:
  push:
    branches:
    - main
    tags:
    - '*'
  pull_request:
    branches:
    - main
  workflow_dispatch:
    inputs:
      new_version:
        description: 'New tag version'
        default: 'patch'
  schedule:
    - cron: '0 2 * * 6' # saturday 2am
jobs:
  autorelease:
    env:
      USERNAME: ${{ github.actor }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      pull-requests: write
    steps:
    - name: Checkout
      uses: actions/checkout@v5

    - uses: jdx/mise-action@v3

    - name: Setup git config
      run: |
        git config user.name actions-bot
        git config user.email actions-bot@users.noreply.github.com

    - name: Check and format
      run: mise run check

    - name: Create Pull Request if there is new stuff from updaters
      if: github.event_name != 'pull_request'
      uses: peter-evans/create-pull-request@v7
      id: pr_create
      with:
        commit-message: Updater script changes
        branch: updater-bot
        delete-branch: true
        title: "Updater: stuff changed"
        body: |
          Changes caused from update scripts

    - name: Stop if a pull request was created
      if: github.event_name != 'pull_request'
      env:
        PR_NUMBER: ${{ steps.pr_create.outputs.pull-request-number }}
      run: |
        if [[ ! -z "$PR_NUMBER" ]]; then
          echo "The update scripts changed something and a PR was created. Giving up deploy." >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

    - name: Build wheel
      run: uv build

    - name: Make release if everything looks right
      if: github.event_name != 'pull_request'
      env:
        NEW_VERSION: ${{ github.event.inputs.new_version }}
      run: |
        if [[ ! -z "$NEW_VERSION" ]]; then
          NO_TAG=1 ./make_release "$NEW_VERSION"
          echo "New version: $(cat ./cloud_savegame/VERSION)" >> $GITHUB_STEP_SUMMARY
          echo "RELEASE_VERSION=$(cat ./cloud_savegame/VERSION)" >> $GITHUB_ENV
        fi

    - name: Create release
      if: github.event_name != 'pull_request' && env.RELEASE_VERSION != ''
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ env.RELEASE_VERSION }}
          TITLE: Release ${{ env.RELEASE_VERSION }}
      run: |
        gh release create "$TAG" \
          --title "$TITLE" \
          --generate-notes \
          --notes-start-tag $(gh release list --limit 1 --json tagName -q .[].tagName)

    - name: Build and publish to PyPI
      if: github.event_name != 'pull_request' && env.RELEASE_VERSION != ''
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        uvx twine upload dist/*
